package ng.com.nokt.demodelivery.controllers;

import ng.com.nokt.demodelivery.entites.Item;
import ng.com.nokt.demodelivery.entites.Vehicle;
import ng.com.nokt.demodelivery.services.ItemService;
import ng.com.nokt.demodelivery.services.VehicleService;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class DeliveryController {

    private final VehicleService vehicleService;
    private final ItemService itemService;

    public DeliveryController(VehicleService vehicleService, ItemService itemService) {
        this.vehicleService = vehicleService;
        this.itemService = itemService;
    }

    @GetMapping("/")
    public String index(){
        return "index";
    }

    @GetMapping("/about")
    public String about(){
        return "about";
    }

    @GetMapping("/create-vehicle")
    public String createVehicle(Model model){
        Vehicle vehicle = new Vehicle();
        model.addAttribute("vehicle", vehicle)
                .addAttribute("allVehicles", vehicleService.getAllVehicles());
        model.addAttribute("allItems", itemService.getAllItems());
        return "feature";
    }

    @PostMapping("/post-vehicle")
    public String postVehicle(Model model, @ModelAttribute("vehicle") Vehicle vehicle){
        String message = "Vehicle created successfully";
        vehicleService.createVehicle(vehicle);
        model.addAttribute("message", message);
        return "feature";
    }

    @PostMapping("/add-item-to-vehicle")
    public String addItemToVehicle(@RequestParam String plateNumber, @RequestParam Long itemId, Model model) {
        Vehicle vehicle = vehicleService.getVehicleByPlateNumber(plateNumber);
        Item item = itemService.getItemById(itemId);

        if (vehicle == null || item == null) {
            model.addAttribute("error", "Invalid vehicle or item selection.");
            return "feature";
        }

        float totalWeight = (float)vehicle.getItems().stream().mapToDouble(Item::getWeight).sum();

        if (totalWeight + item.getWeight() <= vehicle.getCarryingWeight()) {
            vehicle.getItems().add(item);
            vehicleService.createVehicle(vehicle);
            model.addAttribute("message", "Item successfully added to vehicle.");
        } else {
            model.addAttribute("error", "Item is too heavy for the vehicle.");
        }

        // Refresh data for feature.html
        model.addAttribute("allVehicles", vehicleService.getAllVehicles());
        model.addAttribute("allItems", itemService.getAllItems());

        return "feature";
    }

    @GetMapping("/create-item")
    public String createItem(Model model){
        Item item = new Item();
        model.addAttribute("item", item)
                .addAttribute("allItems", itemService.getAllItems());
        model.addAttribute("vehicles", vehicleService.getAllVehicles());
        return "redirect:/feature";
    }
 
    @PostMapping("/post-item")
    public String postItem(Model model, @ModelAttribute("item") Item item){
        String message = "Item created successfully";
        itemService.createItem(item);
        model.addAttribute("message", message);
        return "redirect:/feature";
    }
}
